{
  "data": {
    "createdAt": "2025-05-19T19:41:11.823Z",
    "updatedAt": "2025-06-10T19:46:13.654Z",
    "id": "EfH9tKrFqGvKegb0",
    "name": "Lina Test Anderson",
    "active": false,
    "isArchived": false,
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "lina",
          "options": {}
        },
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 2,
        "position": [
          -2520,
          320
        ],
        "id": "99631833-e042-4502-9762-2ada9e3525ab",
        "name": "Webhook",
        "webhookId": "4c46e41b-18d6-42ce-b346-6d6a8c2ece8d"
      },
      {
        "parameters": {
          "workflowId": {
            "__rl": true,
            "value": "m8RkaAfOkfNOL5uv",
            "mode": "list",
            "cachedResultName": "Módulo_conversor_buffered_chatwoot + evolution LINA"
          },
          "workflowInputs": {
            "mappingMode": "defineBelow",
            "value": {},
            "matchingColumns": [],
            "schema": [],
            "attemptToConvertTypes": false,
            "convertFieldsToString": true
          },
          "options": {}
        },
        "type": "n8n-nodes-base.executeWorkflow",
        "typeVersion": 1.2,
        "position": [
          -1280,
          200
        ],
        "id": "492531ac-c53b-45f3-b5fb-31b196b77ae6",
        "name": "Execute Workflow"
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 2
            },
            "conditions": [
              {
                "id": "b18d7955-8efc-4131-804e-6ea344844bda",
                "leftValue": "={{ $json.body.conversation.status }}",
                "rightValue": "pending",
                "operator": {
                  "type": "string",
                  "operation": "equals",
                  "name": "filter.operator.equals"
                }
              },
              {
                "id": "4183c10a-3faa-4e93-b40d-e6c53a1af901",
                "leftValue": "={{ $json.body.conversation.status }}",
                "rightValue": "open",
                "operator": {
                  "type": "string",
                  "operation": "equals",
                  "name": "filter.operator.equals"
                }
              }
            ],
            "combinator": "or"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.2,
        "position": [
          -1800,
          220
        ],
        "id": "0314c333-7b8a-47a9-9913-23149f0b1fe3",
        "name": "If"
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=https://evo.flowai.app.br/message/sendText/{{ $('Execute Workflow').item.json.instancia_evolution }}",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "number",
                "value": "={{ $('Execute Workflow').item.json.contact.phone }}"
              },
              {
                "name": "text",
                "value": "={{ $('Switch').item.json.output['chat.response'] }}"
              },
              {
                "name": " delay",
                "value": "3000"
              }
            ]
          },
          "options": {}
        },
        "id": "32bb73ba-433d-4d40-b4c6-2ae5d58b6146",
        "name": "evolution send menssage",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          960,
          400
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=https://evo.flowai.app.br/chat/sendPresence/{{ $('Supabase').item.json.instancia_evolution }}",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "presence",
                "value": "composing"
              },
              {
                "name": "delay",
                "value": "={{ (Math.random() * (500 - 100) + 100).toInt() }}"
              },
              {
                "name": "number",
                "value": "={{ $('Execute Workflow').item.json.contact.phone }}"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          960,
          200
        ],
        "id": "e6de5096-a1b8-4b10-a481-fc7693be0c44",
        "name": "HTTP Request"
      },
      {
        "parameters": {
          "workflowId": {
            "__rl": true,
            "value": "td2S9NjHWU0Qw3mK",
            "mode": "list",
            "cachedResultName": "set timeout"
          },
          "workflowInputs": {
            "mappingMode": "defineBelow",
            "value": {},
            "matchingColumns": [],
            "schema": [],
            "attemptToConvertTypes": false,
            "convertFieldsToString": true
          },
          "options": {}
        },
        "type": "n8n-nodes-base.executeWorkflow",
        "typeVersion": 1.2,
        "position": [
          -1060,
          80
        ],
        "id": "2b36d51d-7298-4124-84ec-bb9e27527e16",
        "name": "Set time out"
      },
      {
        "parameters": {
          "operation": "get",
          "tableId": "tb_empresas",
          "filters": {
            "conditions": [
              {
                "keyName": "instancia_chatwoot",
                "keyValue": "={{ $('Edit Fields').item.json.instancia_chatwoot }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          -1040,
          280
        ],
        "id": "4329ce55-e7c0-4891-9aad-1769a564eddf",
        "name": "Supabase",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "6de60fb4-0d01-4185-b7e5-71b61fd0376c",
                "name": "instancia_chatwoot",
                "value": "Prefeitura de Petrolina - PE",
                "type": "string"
              }
            ]
          },
          "includeOtherFields": true,
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          -1500,
          200
        ],
        "id": "d846a8fa-b2f5-4063-8419-89856afbd0ee",
        "name": "Edit Fields"
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "={{ $('Execute Workflow').item.json.chat.input }}",
          "options": {
            "systemMessage": "=<instruções>\nA seguir, você encontrará todas as instruções necessárias para realizar seu trabalho como agente virtual de atendimento da prefeitura de Petrolina. Cada seção do prompt foi cuidadosamente estruturada para guiar sua atuação, garantindo que os cidadãos sejam atendidos com cordialidade, precisão e clareza.\n\nAqui está o que você encontrará:\n\n1. <objetivo>: Define o propósito do agente, o que ele deve fazer ao longo das interações com os cidadãos e como garantir um atendimento de excelência.\n\n2. <persona>: Define o personagem que você deve incorporar, incluindo seu tom, abordagem e linguagem a ser utilizada ao interagir com os cidadãos.\n\n3. <exemplos de frases>: Frases modelo que refletem o tom, estilo e linguagem esperados nas interações com os cidadãos.\n\n4. <passos>: Apresenta o passo a passo de uma conversa de atendimento, desde a abertura até o possível encaminhamento para atendimento humano.\n\n5. <restrições e regras>: Limitações e regras de conduta que devem ser seguidas rigorosamente.\n\n6. <dados>: Base de conhecimento utilizada para responder às dúvidas, e informações pessoais ao final do prompt\n\n7. <contexto>: Explica o cenário em que o agente está atuando e o perfil das pessoas com quem irá interagir.\n\n8. <interpretação personalizada>: Instruções sobre títulos simbólicos como \"meu rei\" ou \"minha rainha\" e como lidar com escolhas feitas pelo cidadão.\n\nRespeitar todas as instruções abaixo é fundamental para um atendimento eficiente e empático. Certifique-se de seguir os passos e cumprir as restrições, sempre guiando a conversa de forma clara, objetiva e respeitosa.\n</instruções>\n\n<objetivo>\nFornecer informações corretas, claras e úteis sobre os serviços da prefeitura de Petrolina, com base exclusivamente na base de conhecimento disponível. Quando necessário, encaminhar o cidadão para atendimento humano com cordialidade e eficiência.\n</objetivo>\n\n<persona>\nVocê é um agente de IA chamada Lina, treinada para atender aos cidadãos de forma cordial, respeitosa e profissional. Você adota uma linguagem acolhedora e regionalizada com o sotaque de Petrolina, PE.\n</persona>\n\n<exemplos de frases>\nAbaixo estão exemplos práticos de frases que refletem o estilo de comunicação esperado da agente Lina:\n\n1. **Abertura e Conexão**\n- “José, meu rei! Seja bem-vindo, visse? É um prazer falar com você. Me diga como posso ajudar.”\n- “Dona Maria, minha rainha! Que bom receber sua mensagem. Vamos ver direitinho o que você precisa, tá?”\n- “Oi, João! Tudo certinho por aí? Fico feliz em poder te ajudar com o que for da prefeitura.”\n\n2. **Acolhimento e Empatia**\n- “Entendi, meu rei. Sei que essas coisas podem dar dor de cabeça, mas vamos resolver juntinhos.”\n- “Ô minha rainha, eu entendo a sua preocupação. Vou te orientar direitinho pra não ter erro, tá bom?”\n- “Fica tranquilo, viu? Tô aqui pra facilitar sua vida com as informações certinhas.”\n\n3. **Esclarecimento com Clareza**\n- “Esse serviço funciona de segunda a sexta, das 8h às 13h, no Centro Administrativo. Pode ir com um documento de identificação com foto.”\n- “A inscrição pode ser feita pela internet, mas se preferir, também dá pra ir pessoalmente no CRAS mais perto de você.”\n\n4. **Reforço de Limitação da IA**\n- “Desculpa, mas só posso responder perguntas relacionadas à prefeitura de Petrolina, tá certo?”\n- “Olha, minha função aqui é cuidar só dos assuntos da prefeitura. Pra outras dúvidas, talvez um atendimento humano possa ajudar melhor.”\n\n5. **Encaminhamento para Atendimento Humano**\n- “Essa questão é um pouquinho mais específica, viu? Vou verificar quem está disponível aqui pra te ajudar com isso.”\n- “Vou te encaminhar pro pessoal certo, tá bom? Aí eles conseguem te atender direitinho.”\n\n6. **Finalização com Cordialidade**\n- “Foi um prazer ajudar você! 😊 Qualquer coisa, é só chamar por aqui de novo, viu?”\n- “Pronto, minha rainha! Tudo certo por aqui. Se precisar de mais alguma coisa, tô por aqui.”\n</exemplos de frases>\n\n<passos>\n1. **Abertura e Conexão:**\n- Ao reconhecer a **primeira interação** com o usuário, use uma saudação carinhosa com base no NOME, escolhendo “meu rei” ou “minha rainha”, de forma natural e não robótica.\n- Exemplo: “NOME, meu rei! Prazer em falar com você, viu? Seu contato é danado de importante pra gente, visse. Me conta, como posso te ajudar hoje?”\n- Após a abertura, **evite repetir constantemente** o uso de “meu rei” ou “minha rainha”. Use esse tratamento **somente de forma ocasional** ao longo da conversa, quando couber naturalmente.\n\n2. **Processamento da Pergunta:**\n- Analise cuidadosamente a pergunta recebida.\n- Consulte a base de conhecimento para obter uma resposta precisa.\n- Se a pergunta não estiver relacionada à prefeitura, responda educadamente:\n\"Desculpa, mas só posso responder perguntas relacionadas à prefeitura de Petrolina, tá certo?\"\n- Caso o usuário mande uma nova mensagem de abertura enquanto a conversa ainda estiver em andamento, dê continuidade normalmente ao atendimento.\n\n3. **Conversação com a IA:**\n- Continue a conversa de forma natural e fluida, como se fosse um diálogo com um ser humano.\n- Utilize o nome ou expressões como “meu rei” ou “minha rainha” **apenas em algumas situações**, não em todas as respostas.\n- Responda com empatia, clareza e acolhimento.\n\n4. **Encaminhamento para Atendimento Humano:**\nEncaminhe o cidadão para atendimento humano quando:\n- Ele solicitar isso explicitamente.\n- Pedir para ser transferido para um setor específico.\n- A pergunta for complexa ou sensível demais para ser respondida pela IA.\nUse a seguinte resposta, com pequenas variações permitidas:\n\"Vou verificar quem está disponível aqui para te ajudar com essa.\"\n\n5. **Finalização:**\nFinalize o atendimento quando:\n- O cidadão solicitar isso explicitamente.\n- Ou quando entender, pelo contexto, que ele já foi atendido.\nUse a seguinte resposta:\n\"Foi um prazer ajudar você! 😊\"\n</passos>\n\n<restrições e regras>\n- Nunca forneça informações que não estejam na base de conhecimento.\n- Não responda a perguntas que não sejam sobre a prefeitura de Petrolina.\n- Mantenha sempre um tom cordial, respeitoso e claro.\n- Utilize sempre a base de conhecimento como fonte única de informação.\n- Se não souber responder, informe que a informação não está disponível.\n- Sempre analise as perguntas, responda conforme a definição da saída.\n- Sempre utilize o mesmo idioma da mensagem do usuário.\n</restrições e regras>\n\n<dados>\n**Base de Conhecimento:** Todas as respostas devem ser baseadas exclusivamente na base de conhecimento fornecida via ferramenta tools 'base_conhecimento'. Essa base inclui informações sobre os serviços da prefeitura, horários de atendimento, setores, programas e demais dúvidas frequentes.\n</dados>\n\n<contexto>\nVocê está atuando como agente de atendimento virtual da prefeitura de Petrolina. Os cidadãos que entram em contato estão em busca de informações sobre serviços públicos municipais. Seu papel é oferecer um atendimento eficiente, simpático e 100% baseado nas informações da base de conhecimento oficial.\n</contexto>\n\n<interpretação personalizada>\n- Caso o cidadão diga “Minha Rainha é [NOME]” ou “Meu Rei é [NOME]”, registre esse nome como a figura simbólica de autoridade ou referência para ele.\n- Mostre respeito por essa escolha sempre que for apropriado, principalmente em momentos formais ou quando o tom da conversa indicar importância.\n- Não substitua essa escolha por outra arbitrariamente.\n- O uso de \"meu rei\" ou \"minha rainha\" pelo agente deve ocorrer apenas ocasionalmente, como expressão de carinho regional, e não em todas as mensagens.\n</interpretação personalizada>\n\n<saida>\nResponda da seguinte forma:\nResponse: é a resposta do agente de IA;\nCategoria: AI, HUMANO ou FINALIZAÇÃO;\n- AI = Quando indica que a conversa continuará com a IA;\n- HUMANO = Quando a conversa precisa ser transferida para um humano;\n- FINALIZAÇÃO = quando o agente de IA deve finalizar o atendimento;\nSentimento = sentimento da mensagem do usuário (positivo, neutro, negativo)\n- ID.URL: URL do metadado do banco vetorial\n</saida>\n\nInformações pessoais:\nNOME: {{ $('Execute Workflow').item.json.contact.name }}"
          }
        },
        "id": "e27c1daa-4a65-431f-9f71-f09c6b0bab00",
        "name": "AI Agent1",
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 1.6,
        "position": [
          -760,
          280
        ]
      },
      {
        "parameters": {
          "sessionIdType": "customKey",
          "sessionKey": "=chat-debouncer-{{$('Supabase').item.json.instancia_evolution}}-{{ $('Execute Workflow').item.json.chat.id }}",
          "sessionTTL": "={{ 60 * 60 * 24 }}",
          "contextWindowLength": 15
        },
        "id": "d04a0af1-3862-4759-8ae4-64961707ed1e",
        "name": "Redis Chat Memory1",
        "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
        "typeVersion": 1.3,
        "position": [
          -740,
          540
        ]
      },
      {
        "parameters": {
          "mode": "retrieve-as-tool",
          "toolName": "base_conhecimento",
          "toolDescription": "base de conhecimento a ser utilizada pelo agente",
          "tableName": {
            "__rl": true,
            "value": "=documents",
            "mode": "id"
          },
          "options": {
            "queryName": "match_documents",
            "metadata": {
              "metadataValues": [
                {
                  "name": "id_empresa",
                  "value": "={{ $('Execute Workflow').item.json.dados.empresaid }}"
                }
              ]
            }
          }
        },
        "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
        "typeVersion": 1.1,
        "position": [
          -620,
          620
        ],
        "id": "7e5e7e03-9f3d-4ecd-91d2-25caef153b24",
        "name": "Supabase Vector Store1"
      },
      {
        "parameters": {
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "typeVersion": 1.2,
        "position": [
          -620,
          760
        ],
        "id": "945561d1-ae1a-4c27-9479-bd4101e5e83a",
        "name": "Embeddings OpenAI1"
      },
      {
        "parameters": {
          "model": {
            "__rl": true,
            "value": "gpt-4.1-mini",
            "mode": "list",
            "cachedResultName": "gpt-4.1-mini"
          },
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1.2,
        "position": [
          -860,
          540
        ],
        "id": "9c4683cd-bf25-473b-9203-13a2dbc65e34",
        "name": "OpenAI Chat Model1"
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=https://chat.flowai.app.br/api/v1/accounts/{{ $('Webhook').item.json.body.account.id }}/conversations/{{ $('Webhook').item.json.body.conversation.messages[0].conversation_id }}/assignments",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "team_id",
                "value": "1"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          500,
          40
        ],
        "id": "bca5ead0-9af5-4824-9de4-2cf96dba68a0",
        "name": "HTTP Request1"
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.output['chat.categoria'] }}",
                      "rightValue": "HUMANO",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "id": "982e8ad7-589c-4472-9da0-3d5bf5ecef9d"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "HUMANO"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "e8b854a9-2720-43ed-9c86-aa8234860fe0",
                      "leftValue": "={{ $json.output['chat.categoria'] }}",
                      "rightValue": "AI",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "AI"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "d94ac4e7-1a54-4d25-920c-577151cf79cf",
                      "leftValue": "={{ $json.output['chat.categoria'] }}",
                      "rightValue": "FINALIZAÇÃO",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "FINALIZAÇÃO"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          80,
          280
        ],
        "id": "1b002aea-afe3-4d0b-9b2d-bc1eb3ce8206",
        "name": "Switch"
      },
      {
        "parameters": {
          "numberInputs": 3
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.1,
        "position": [
          740,
          280
        ],
        "id": "06536bcc-f707-4809-bf67-5fe68a413a31",
        "name": "Merge"
      },
      {
        "parameters": {},
        "type": "@devlikeapro/n8n-nodes-chatwoot.chatWoot",
        "typeVersion": 1,
        "position": [
          400,
          620
        ],
        "id": "d64db61b-3537-49e5-9e76-22c56ced46b2",
        "name": "ChatWoot1",
        "credentials": {}
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "={{ $json.output }}",
          "hasOutputParser": true,
          "messages": {
            "messageValues": [
              {
                "message": "<saida>\nA saida deve ser no formato do outputparser:\n*chat.response: é a resposta do agente de IA;\n*chat.categoria: AI, HUMANO ou FINALIZAÇÃO;\n-AI = Quando indica que a conversa continuará com o AI;\n-HUMANO = Quando a conversa precisa ser transferida para um humano;\n-FINALIZAÇÃO = quando o agente de IA deve finalizar o atendimento;\n*chat.setimento = sentimento da mensagem do usuario (positivo, neutro, negativo)\n</saida> "
              }
            ]
          }
        },
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "typeVersion": 1.6,
        "position": [
          -300,
          280
        ],
        "id": "a5b31cc1-af8d-4beb-86d6-9060aa00cabf",
        "name": "Basic LLM Chain"
      },
      {
        "parameters": {
          "jsonSchemaExample": "{\n\t\"chat.response\": \"Olá, tudo bem contigo?\",\n\t\"chat.categoria\": \"Finalização\",\n    \"chat.sentimento\": \"Neutro\"\n}"
        },
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "typeVersion": 1.2,
        "position": [
          -40,
          520
        ],
        "id": "4e803f0e-c1d9-44e6-ab0f-4b5c9b1e7ffc",
        "name": "Structured Output Parser"
      },
      {
        "parameters": {
          "model": {
            "__rl": true,
            "value": "gpt-4.1-nano",
            "mode": "list",
            "cachedResultName": "gpt-4.1-nano"
          },
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1.2,
        "position": [
          -340,
          520
        ],
        "id": "81e8f62b-5da4-495b-b1a0-91699e2b4a59",
        "name": "OpenAI Chat Model"
      },
      {
        "parameters": {
          "operation": "delete",
          "key": "=chat-debouncer-{{ $json.instancia_evolution }}-{{ $('Webhook').item.json.body.meta.sender.identifier }}"
        },
        "type": "n8n-nodes-base.redis",
        "typeVersion": 1,
        "position": [
          -1500,
          420
        ],
        "id": "e97d4adc-a045-454a-b2d9-ce956c737f0a",
        "name": "Redis2"
      },
      {
        "parameters": {
          "operation": "delete",
          "key": "=chat-monitor-timeout-{{ $json.instancia_evolution }}-{{ $('Webhook').item.json.body.messages[0].sender.identifier }}"
        },
        "type": "n8n-nodes-base.redis",
        "typeVersion": 1,
        "position": [
          -1280,
          420
        ],
        "id": "d46f8a37-36bd-4acd-9512-44f15d0763bf",
        "name": "Redis3"
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 2
            },
            "conditions": [
              {
                "id": "2f09aca6-bc17-43b9-b16a-8f9c11e88534",
                "leftValue": "={{ $json.body.event }}",
                "rightValue": "conversation_resolved",
                "operator": {
                  "type": "string",
                  "operation": "notEquals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.2,
        "position": [
          -2320,
          320
        ],
        "id": "07e95f77-2419-43ea-bc0c-d8bc0f2d193a",
        "name": "Verifica se foi resolvido"
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 2
            },
            "conditions": [
              {
                "id": "c1a08880-ea49-4056-a2a9-6475e43c5e3a",
                "leftValue": "={{ $json.body.message_type }}",
                "rightValue": "incoming",
                "operator": {
                  "type": "string",
                  "operation": "equals",
                  "name": "filter.operator.equals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.filter",
        "typeVersion": 2.2,
        "position": [
          -2020,
          220
        ],
        "id": "e36b48e6-5af4-441d-be6a-988e6574ebe0",
        "name": "Filter"
      },
      {
        "parameters": {
          "operation": "get",
          "tableId": "tb_empresas",
          "filters": {
            "conditions": [
              {
                "keyName": "instancia_chatwoot",
                "keyValue": "={{ $json.instancia_chatwoot }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          -1720,
          420
        ],
        "id": "94c03ecb-5742-49b7-a6ae-183428b3e682",
        "name": "Supabase1",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "6de60fb4-0d01-4185-b7e5-71b61fd0376c",
                "name": "instancia_chatwoot",
                "value": "Prefeitura de Petrolina - PE",
                "type": "string"
              }
            ]
          },
          "includeOtherFields": true,
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          -1940,
          420
        ],
        "id": "4f6f880a-9360-4e40-9781-42e00f48e9b0",
        "name": "Edit Fields1"
      }
    ],
    "connections": {
      "Webhook": {
        "main": [
          [
            {
              "node": "Verifica se foi resolvido",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Workflow": {
        "main": [
          [
            {
              "node": "Set time out",
              "type": "main",
              "index": 0
            },
            {
              "node": "Supabase",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Supabase": {
        "main": [
          [
            {
              "node": "AI Agent1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields": {
        "main": [
          [
            {
              "node": "Execute Workflow",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent1": {
        "main": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Redis Chat Memory1": {
        "ai_memory": [
          [
            {
              "node": "AI Agent1",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Supabase Vector Store1": {
        "ai_tool": [
          [
            {
              "node": "AI Agent1",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI1": {
        "ai_embedding": [
          [
            {
              "node": "Supabase Vector Store1",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent1",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request1": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch": {
        "main": [
          [],
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "HTTP Request",
              "type": "main",
              "index": 0
            },
            {
              "node": "evolution send menssage",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Basic LLM Chain": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Redis2": {
        "main": [
          [
            {
              "node": "Redis3",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Verifica se foi resolvido": {
        "main": [
          [
            {
              "node": "Filter",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Edit Fields1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter": {
        "main": [
          [
            {
              "node": "If",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Supabase1": {
        "main": [
          [
            {
              "node": "Redis2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields1": {
        "main": [
          [
            {
              "node": "Supabase1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {
      "Webhook": [
        {
          "json": {
            "headers": {
              "host": "webhooks.flowai.app.br",
              "user-agent": "rest-client/2.1.0 (linux x86_64) ruby/3.3.3p89",
              "content-length": "2149",
              "accept": "application/json",
              "accept-encoding": "gzip;q=1.0,deflate;q=0.6,identity;q=0.3",
              "content-type": "application/json",
              "x-forwarded-for": "3.142.189.141",
              "x-forwarded-host": "webhooks.flowai.app.br",
              "x-forwarded-port": "443",
              "x-forwarded-proto": "https",
              "x-forwarded-server": "72908d77b8b7",
              "x-real-ip": "3.142.189.141"
            },
            "params": {},
            "query": {},
            "body": {
              "additional_attributes": {},
              "can_reply": true,
              "channel": "Channel::Api",
              "contact_inbox": {
                "id": 432,
                "contact_id": 184,
                "inbox_id": 9,
                "source_id": "85735972-3136-4a97-a028-35a5b53cd634",
                "created_at": "2025-05-06T03:07:53.944Z",
                "updated_at": "2025-05-06T03:07:53.944Z",
                "hmac_verified": false,
                "pubsub_token": "dg9oZjsQ6wu38Meu218czJBS"
              },
              "id": 33,
              "inbox_id": 9,
              "messages": [
                {
                  "id": 1718,
                  "content": "Opa\n",
                  "account_id": 2,
                  "inbox_id": 9,
                  "conversation_id": 33,
                  "message_type": 1,
                  "created_at": 1746500958,
                  "updated_at": "2025-05-06T03:12:41.264Z",
                  "private": false,
                  "status": "read",
                  "source_id": null,
                  "content_type": "text",
                  "content_attributes": {},
                  "sender_type": "User",
                  "sender_id": 1,
                  "external_source_ids": {},
                  "additional_attributes": {},
                  "processed_message_content": "Opa\n",
                  "sentiment": {},
                  "conversation": {
                    "assignee_id": null,
                    "unread_count": 0,
                    "last_activity_at": 1746502701,
                    "contact_inbox": {
                      "source_id": "85735972-3136-4a97-a028-35a5b53cd634"
                    }
                  },
                  "sender": {
                    "id": 1,
                    "name": "Admin",
                    "available_name": "Admin",
                    "avatar_url": "",
                    "type": "user",
                    "availability_status": "online",
                    "thumbnail": ""
                  }
                }
              ],
              "labels": [],
              "meta": {
                "sender": {
                  "additional_attributes": {},
                  "custom_attributes": {},
                  "email": null,
                  "id": 184,
                  "identifier": "554588199081@s.whatsapp.net",
                  "name": "Anderson Haas",
                  "phone_number": "+554588199081",
                  "thumbnail": "https://chat.flowai.app.br/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBbW9CIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--2ad477e1881e87813000c7470cb4e4669b5d627e/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--1da7914b3fdb798d4570bf6b3e9b1e61939b4111/390071190_823915763031672_8249512950801325048_n.jpg",
                  "blocked": false,
                  "type": "contact"
                },
                "assignee": null,
                "team": null,
                "hmac_verified": false
              },
              "status": "resolved",
              "custom_attributes": {},
              "snoozed_until": null,
              "unread_count": 0,
              "first_reply_created_at": "2025-05-06T03:07:54.012Z",
              "priority": null,
              "waiting_since": 0,
              "agent_last_seen_at": 1746502701,
              "contact_last_seen_at": 1746501160,
              "last_activity_at": 1746502701,
              "timestamp": 1746502701,
              "created_at": 1746500873,
              "updated_at": 1746502717.520638,
              "event": "conversation_resolved"
            },
            "webhookUrl": "https://webhooks.flowai.app.br/webhook/lina",
            "executionMode": "production"
          }
        }
      ]
    },
    "versionId": "656d5f19-e43a-44a8-8c58-6917f033f0b1",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2025-05-19T18:41:32.426Z",
        "updatedAt": "2025-05-19T18:41:32.426Z",
        "id": "byJF50EssW8Z7Xdg",
        "name": "codai"
      }
    ]
  },
  "createdAt": "2025-05-19T19:41:11.823Z",
  "updatedAt": "2025-06-10T19:46:13.654Z",
  "id": "EfH9tKrFqGvKegb0",
  "name": "Lina Test Anderson",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "lina",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2520,
        320
      ],
      "id": "99631833-e042-4502-9762-2ada9e3525ab",
      "name": "Webhook",
      "webhookId": "4c46e41b-18d6-42ce-b346-6d6a8c2ece8d"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "m8RkaAfOkfNOL5uv",
          "mode": "list",
          "cachedResultName": "Módulo_conversor_buffered_chatwoot + evolution LINA"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -1280,
        200
      ],
      "id": "492531ac-c53b-45f3-b5fb-31b196b77ae6",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b18d7955-8efc-4131-804e-6ea344844bda",
              "leftValue": "={{ $json.body.conversation.status }}",
              "rightValue": "pending",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "4183c10a-3faa-4e93-b40d-e6c53a1af901",
              "leftValue": "={{ $json.body.conversation.status }}",
              "rightValue": "open",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1800,
        220
      ],
      "id": "0314c333-7b8a-47a9-9913-23149f0b1fe3",
      "name": "If"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evo.flowai.app.br/message/sendText/{{ $('Execute Workflow').item.json.instancia_evolution }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Execute Workflow').item.json.contact.phone }}"
            },
            {
              "name": "text",
              "value": "={{ $('Switch').item.json.output['chat.response'] }}"
            },
            {
              "name": " delay",
              "value": "3000"
            }
          ]
        },
        "options": {}
      },
      "id": "32bb73ba-433d-4d40-b4c6-2ae5d58b6146",
      "name": "evolution send menssage",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        960,
        400
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evo.flowai.app.br/chat/sendPresence/{{ $('Supabase').item.json.instancia_evolution }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "presence",
              "value": "composing"
            },
            {
              "name": "delay",
              "value": "={{ (Math.random() * (500 - 100) + 100).toInt() }}"
            },
            {
              "name": "number",
              "value": "={{ $('Execute Workflow').item.json.contact.phone }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        960,
        200
      ],
      "id": "e6de5096-a1b8-4b10-a481-fc7693be0c44",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "td2S9NjHWU0Qw3mK",
          "mode": "list",
          "cachedResultName": "set timeout"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -1060,
        80
      ],
      "id": "2b36d51d-7298-4124-84ec-bb9e27527e16",
      "name": "Set time out"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "tb_empresas",
        "filters": {
          "conditions": [
            {
              "keyName": "instancia_chatwoot",
              "keyValue": "={{ $('Edit Fields').item.json.instancia_chatwoot }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1040,
        280
      ],
      "id": "4329ce55-e7c0-4891-9aad-1769a564eddf",
      "name": "Supabase",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6de60fb4-0d01-4185-b7e5-71b61fd0376c",
              "name": "instancia_chatwoot",
              "value": "Prefeitura de Petrolina - PE",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1500,
        200
      ],
      "id": "d846a8fa-b2f5-4063-8419-89856afbd0ee",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Execute Workflow').item.json.chat.input }}",
        "options": {
          "systemMessage": "=<instruções>\nA seguir, você encontrará todas as instruções necessárias para realizar seu trabalho como agente virtual de atendimento da prefeitura de Petrolina. Cada seção do prompt foi cuidadosamente estruturada para guiar sua atuação, garantindo que os cidadãos sejam atendidos com cordialidade, precisão e clareza.\n\nAqui está o que você encontrará:\n\n1. <objetivo>: Define o propósito do agente, o que ele deve fazer ao longo das interações com os cidadãos e como garantir um atendimento de excelência.\n\n2. <persona>: Define o personagem que você deve incorporar, incluindo seu tom, abordagem e linguagem a ser utilizada ao interagir com os cidadãos.\n\n3. <exemplos de frases>: Frases modelo que refletem o tom, estilo e linguagem esperados nas interações com os cidadãos.\n\n4. <passos>: Apresenta o passo a passo de uma conversa de atendimento, desde a abertura até o possível encaminhamento para atendimento humano.\n\n5. <restrições e regras>: Limitações e regras de conduta que devem ser seguidas rigorosamente.\n\n6. <dados>: Base de conhecimento utilizada para responder às dúvidas, e informações pessoais ao final do prompt\n\n7. <contexto>: Explica o cenário em que o agente está atuando e o perfil das pessoas com quem irá interagir.\n\n8. <interpretação personalizada>: Instruções sobre títulos simbólicos como \"meu rei\" ou \"minha rainha\" e como lidar com escolhas feitas pelo cidadão.\n\nRespeitar todas as instruções abaixo é fundamental para um atendimento eficiente e empático. Certifique-se de seguir os passos e cumprir as restrições, sempre guiando a conversa de forma clara, objetiva e respeitosa.\n</instruções>\n\n<objetivo>\nFornecer informações corretas, claras e úteis sobre os serviços da prefeitura de Petrolina, com base exclusivamente na base de conhecimento disponível. Quando necessário, encaminhar o cidadão para atendimento humano com cordialidade e eficiência.\n</objetivo>\n\n<persona>\nVocê é um agente de IA chamada Lina, treinada para atender aos cidadãos de forma cordial, respeitosa e profissional. Você adota uma linguagem acolhedora e regionalizada com o sotaque de Petrolina, PE.\n</persona>\n\n<exemplos de frases>\nAbaixo estão exemplos práticos de frases que refletem o estilo de comunicação esperado da agente Lina:\n\n1. **Abertura e Conexão**\n- “José, meu rei! Seja bem-vindo, visse? É um prazer falar com você. Me diga como posso ajudar.”\n- “Dona Maria, minha rainha! Que bom receber sua mensagem. Vamos ver direitinho o que você precisa, tá?”\n- “Oi, João! Tudo certinho por aí? Fico feliz em poder te ajudar com o que for da prefeitura.”\n\n2. **Acolhimento e Empatia**\n- “Entendi, meu rei. Sei que essas coisas podem dar dor de cabeça, mas vamos resolver juntinhos.”\n- “Ô minha rainha, eu entendo a sua preocupação. Vou te orientar direitinho pra não ter erro, tá bom?”\n- “Fica tranquilo, viu? Tô aqui pra facilitar sua vida com as informações certinhas.”\n\n3. **Esclarecimento com Clareza**\n- “Esse serviço funciona de segunda a sexta, das 8h às 13h, no Centro Administrativo. Pode ir com um documento de identificação com foto.”\n- “A inscrição pode ser feita pela internet, mas se preferir, também dá pra ir pessoalmente no CRAS mais perto de você.”\n\n4. **Reforço de Limitação da IA**\n- “Desculpa, mas só posso responder perguntas relacionadas à prefeitura de Petrolina, tá certo?”\n- “Olha, minha função aqui é cuidar só dos assuntos da prefeitura. Pra outras dúvidas, talvez um atendimento humano possa ajudar melhor.”\n\n5. **Encaminhamento para Atendimento Humano**\n- “Essa questão é um pouquinho mais específica, viu? Vou verificar quem está disponível aqui pra te ajudar com isso.”\n- “Vou te encaminhar pro pessoal certo, tá bom? Aí eles conseguem te atender direitinho.”\n\n6. **Finalização com Cordialidade**\n- “Foi um prazer ajudar você! 😊 Qualquer coisa, é só chamar por aqui de novo, viu?”\n- “Pronto, minha rainha! Tudo certo por aqui. Se precisar de mais alguma coisa, tô por aqui.”\n</exemplos de frases>\n\n<passos>\n1. **Abertura e Conexão:**\n- Ao reconhecer a **primeira interação** com o usuário, use uma saudação carinhosa com base no NOME, escolhendo “meu rei” ou “minha rainha”, de forma natural e não robótica.\n- Exemplo: “NOME, meu rei! Prazer em falar com você, viu? Seu contato é danado de importante pra gente, visse. Me conta, como posso te ajudar hoje?”\n- Após a abertura, **evite repetir constantemente** o uso de “meu rei” ou “minha rainha”. Use esse tratamento **somente de forma ocasional** ao longo da conversa, quando couber naturalmente.\n\n2. **Processamento da Pergunta:**\n- Analise cuidadosamente a pergunta recebida.\n- Consulte a base de conhecimento para obter uma resposta precisa.\n- Se a pergunta não estiver relacionada à prefeitura, responda educadamente:\n\"Desculpa, mas só posso responder perguntas relacionadas à prefeitura de Petrolina, tá certo?\"\n- Caso o usuário mande uma nova mensagem de abertura enquanto a conversa ainda estiver em andamento, dê continuidade normalmente ao atendimento.\n\n3. **Conversação com a IA:**\n- Continue a conversa de forma natural e fluida, como se fosse um diálogo com um ser humano.\n- Utilize o nome ou expressões como “meu rei” ou “minha rainha” **apenas em algumas situações**, não em todas as respostas.\n- Responda com empatia, clareza e acolhimento.\n\n4. **Encaminhamento para Atendimento Humano:**\nEncaminhe o cidadão para atendimento humano quando:\n- Ele solicitar isso explicitamente.\n- Pedir para ser transferido para um setor específico.\n- A pergunta for complexa ou sensível demais para ser respondida pela IA.\nUse a seguinte resposta, com pequenas variações permitidas:\n\"Vou verificar quem está disponível aqui para te ajudar com essa.\"\n\n5. **Finalização:**\nFinalize o atendimento quando:\n- O cidadão solicitar isso explicitamente.\n- Ou quando entender, pelo contexto, que ele já foi atendido.\nUse a seguinte resposta:\n\"Foi um prazer ajudar você! 😊\"\n</passos>\n\n<restrições e regras>\n- Nunca forneça informações que não estejam na base de conhecimento.\n- Não responda a perguntas que não sejam sobre a prefeitura de Petrolina.\n- Mantenha sempre um tom cordial, respeitoso e claro.\n- Utilize sempre a base de conhecimento como fonte única de informação.\n- Se não souber responder, informe que a informação não está disponível.\n- Sempre analise as perguntas, responda conforme a definição da saída.\n- Sempre utilize o mesmo idioma da mensagem do usuário.\n</restrições e regras>\n\n<dados>\n**Base de Conhecimento:** Todas as respostas devem ser baseadas exclusivamente na base de conhecimento fornecida via ferramenta tools 'base_conhecimento'. Essa base inclui informações sobre os serviços da prefeitura, horários de atendimento, setores, programas e demais dúvidas frequentes.\n</dados>\n\n<contexto>\nVocê está atuando como agente de atendimento virtual da prefeitura de Petrolina. Os cidadãos que entram em contato estão em busca de informações sobre serviços públicos municipais. Seu papel é oferecer um atendimento eficiente, simpático e 100% baseado nas informações da base de conhecimento oficial.\n</contexto>\n\n<interpretação personalizada>\n- Caso o cidadão diga “Minha Rainha é [NOME]” ou “Meu Rei é [NOME]”, registre esse nome como a figura simbólica de autoridade ou referência para ele.\n- Mostre respeito por essa escolha sempre que for apropriado, principalmente em momentos formais ou quando o tom da conversa indicar importância.\n- Não substitua essa escolha por outra arbitrariamente.\n- O uso de \"meu rei\" ou \"minha rainha\" pelo agente deve ocorrer apenas ocasionalmente, como expressão de carinho regional, e não em todas as mensagens.\n</interpretação personalizada>\n\n<saida>\nResponda da seguinte forma:\nResponse: é a resposta do agente de IA;\nCategoria: AI, HUMANO ou FINALIZAÇÃO;\n- AI = Quando indica que a conversa continuará com a IA;\n- HUMANO = Quando a conversa precisa ser transferida para um humano;\n- FINALIZAÇÃO = quando o agente de IA deve finalizar o atendimento;\nSentimento = sentimento da mensagem do usuário (positivo, neutro, negativo)\n- ID.URL: URL do metadado do banco vetorial\n</saida>\n\nInformações pessoais:\nNOME: {{ $('Execute Workflow').item.json.contact.name }}"
        }
      },
      "id": "e27c1daa-4a65-431f-9f71-f09c6b0bab00",
      "name": "AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -760,
        280
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=chat-debouncer-{{$('Supabase').item.json.instancia_evolution}}-{{ $('Execute Workflow').item.json.chat.id }}",
        "sessionTTL": "={{ 60 * 60 * 24 }}",
        "contextWindowLength": 15
      },
      "id": "d04a0af1-3862-4759-8ae4-64961707ed1e",
      "name": "Redis Chat Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.3,
      "position": [
        -740,
        540
      ]
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "base_conhecimento",
        "toolDescription": "base de conhecimento a ser utilizada pelo agente",
        "tableName": {
          "__rl": true,
          "value": "=documents",
          "mode": "id"
        },
        "options": {
          "queryName": "match_documents",
          "metadata": {
            "metadataValues": [
              {
                "name": "id_empresa",
                "value": "={{ $('Execute Workflow').item.json.dados.empresaid }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.1,
      "position": [
        -620,
        620
      ],
      "id": "7e5e7e03-9f3d-4ecd-91d2-25caef153b24",
      "name": "Supabase Vector Store1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -620,
        760
      ],
      "id": "945561d1-ae1a-4c27-9479-bd4101e5e83a",
      "name": "Embeddings OpenAI1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -860,
        540
      ],
      "id": "9c4683cd-bf25-473b-9203-13a2dbc65e34",
      "name": "OpenAI Chat Model1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://chat.flowai.app.br/api/v1/accounts/{{ $('Webhook').item.json.body.account.id }}/conversations/{{ $('Webhook').item.json.body.conversation.messages[0].conversation_id }}/assignments",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "team_id",
              "value": "1"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        500,
        40
      ],
      "id": "bca5ead0-9af5-4824-9de4-2cf96dba68a0",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output['chat.categoria'] }}",
                    "rightValue": "HUMANO",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "982e8ad7-589c-4472-9da0-3d5bf5ecef9d"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "HUMANO"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e8b854a9-2720-43ed-9c86-aa8234860fe0",
                    "leftValue": "={{ $json.output['chat.categoria'] }}",
                    "rightValue": "AI",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "AI"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d94ac4e7-1a54-4d25-920c-577151cf79cf",
                    "leftValue": "={{ $json.output['chat.categoria'] }}",
                    "rightValue": "FINALIZAÇÃO",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "FINALIZAÇÃO"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        80,
        280
      ],
      "id": "1b002aea-afe3-4d0b-9b2d-bc1eb3ce8206",
      "name": "Switch"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        740,
        280
      ],
      "id": "06536bcc-f707-4809-bf67-5fe68a413a31",
      "name": "Merge"
    },
    {
      "parameters": {},
      "type": "@devlikeapro/n8n-nodes-chatwoot.chatWoot",
      "typeVersion": 1,
      "position": [
        400,
        620
      ],
      "id": "d64db61b-3537-49e5-9e76-22c56ced46b2",
      "name": "ChatWoot1",
      "credentials": {}
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "<saida>\nA saida deve ser no formato do outputparser:\n*chat.response: é a resposta do agente de IA;\n*chat.categoria: AI, HUMANO ou FINALIZAÇÃO;\n-AI = Quando indica que a conversa continuará com o AI;\n-HUMANO = Quando a conversa precisa ser transferida para um humano;\n-FINALIZAÇÃO = quando o agente de IA deve finalizar o atendimento;\n*chat.setimento = sentimento da mensagem do usuario (positivo, neutro, negativo)\n</saida> "
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -300,
        280
      ],
      "id": "a5b31cc1-af8d-4beb-86d6-9060aa00cabf",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"chat.response\": \"Olá, tudo bem contigo?\",\n\t\"chat.categoria\": \"Finalização\",\n    \"chat.sentimento\": \"Neutro\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -40,
        520
      ],
      "id": "4e803f0e-c1d9-44e6-ab0f-4b5c9b1e7ffc",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -340,
        520
      ],
      "id": "81e8f62b-5da4-495b-b1a0-91699e2b4a59",
      "name": "OpenAI Chat Model"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=chat-debouncer-{{ $json.instancia_evolution }}-{{ $('Webhook').item.json.body.meta.sender.identifier }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1500,
        420
      ],
      "id": "e97d4adc-a045-454a-b2d9-ce956c737f0a",
      "name": "Redis2"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=chat-monitor-timeout-{{ $json.instancia_evolution }}-{{ $('Webhook').item.json.body.messages[0].sender.identifier }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1280,
        420
      ],
      "id": "d46f8a37-36bd-4acd-9512-44f15d0763bf",
      "name": "Redis3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2f09aca6-bc17-43b9-b16a-8f9c11e88534",
              "leftValue": "={{ $json.body.event }}",
              "rightValue": "conversation_resolved",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2320,
        320
      ],
      "id": "07e95f77-2419-43ea-bc0c-d8bc0f2d193a",
      "name": "Verifica se foi resolvido"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c1a08880-ea49-4056-a2a9-6475e43c5e3a",
              "leftValue": "={{ $json.body.message_type }}",
              "rightValue": "incoming",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -2020,
        220
      ],
      "id": "e36b48e6-5af4-441d-be6a-988e6574ebe0",
      "name": "Filter"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "tb_empresas",
        "filters": {
          "conditions": [
            {
              "keyName": "instancia_chatwoot",
              "keyValue": "={{ $json.instancia_chatwoot }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1720,
        420
      ],
      "id": "94c03ecb-5742-49b7-a6ae-183428b3e682",
      "name": "Supabase1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6de60fb4-0d01-4185-b7e5-71b61fd0376c",
              "name": "instancia_chatwoot",
              "value": "Prefeitura de Petrolina - PE",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1940,
        420
      ],
      "id": "4f6f880a-9360-4e40-9781-42e00f48e9b0",
      "name": "Edit Fields1"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Verifica se foi resolvido",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Set time out",
            "type": "main",
            "index": 0
          },
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "evolution send menssage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Redis2": {
      "main": [
        [
          {
            "node": "Redis3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verifica se foi resolvido": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase1": {
      "main": [
        [
          {
            "node": "Redis2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Supabase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "webhooks.flowai.app.br",
            "user-agent": "rest-client/2.1.0 (linux x86_64) ruby/3.3.3p89",
            "content-length": "2149",
            "accept": "application/json",
            "accept-encoding": "gzip;q=1.0,deflate;q=0.6,identity;q=0.3",
            "content-type": "application/json",
            "x-forwarded-for": "3.142.189.141",
            "x-forwarded-host": "webhooks.flowai.app.br",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "72908d77b8b7",
            "x-real-ip": "3.142.189.141"
          },
          "params": {},
          "query": {},
          "body": {
            "additional_attributes": {},
            "can_reply": true,
            "channel": "Channel::Api",
            "contact_inbox": {
              "id": 432,
              "contact_id": 184,
              "inbox_id": 9,
              "source_id": "85735972-3136-4a97-a028-35a5b53cd634",
              "created_at": "2025-05-06T03:07:53.944Z",
              "updated_at": "2025-05-06T03:07:53.944Z",
              "hmac_verified": false,
              "pubsub_token": "dg9oZjsQ6wu38Meu218czJBS"
            },
            "id": 33,
            "inbox_id": 9,
            "messages": [
              {
                "id": 1718,
                "content": "Opa\n",
                "account_id": 2,
                "inbox_id": 9,
                "conversation_id": 33,
                "message_type": 1,
                "created_at": 1746500958,
                "updated_at": "2025-05-06T03:12:41.264Z",
                "private": false,
                "status": "read",
                "source_id": null,
                "content_type": "text",
                "content_attributes": {},
                "sender_type": "User",
                "sender_id": 1,
                "external_source_ids": {},
                "additional_attributes": {},
                "processed_message_content": "Opa\n",
                "sentiment": {},
                "conversation": {
                  "assignee_id": null,
                  "unread_count": 0,
                  "last_activity_at": 1746502701,
                  "contact_inbox": {
                    "source_id": "85735972-3136-4a97-a028-35a5b53cd634"
                  }
                },
                "sender": {
                  "id": 1,
                  "name": "Admin",
                  "available_name": "Admin",
                  "avatar_url": "",
                  "type": "user",
                  "availability_status": "online",
                  "thumbnail": ""
                }
              }
            ],
            "labels": [],
            "meta": {
              "sender": {
                "additional_attributes": {},
                "custom_attributes": {},
                "email": null,
                "id": 184,
                "identifier": "554588199081@s.whatsapp.net",
                "name": "Anderson Haas",
                "phone_number": "+554588199081",
                "thumbnail": "https://chat.flowai.app.br/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBbW9CIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--2ad477e1881e87813000c7470cb4e4669b5d627e/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--1da7914b3fdb798d4570bf6b3e9b1e61939b4111/390071190_823915763031672_8249512950801325048_n.jpg",
                "blocked": false,
                "type": "contact"
              },
              "assignee": null,
              "team": null,
              "hmac_verified": false
            },
            "status": "resolved",
            "custom_attributes": {},
            "snoozed_until": null,
            "unread_count": 0,
            "first_reply_created_at": "2025-05-06T03:07:54.012Z",
            "priority": null,
            "waiting_since": 0,
            "agent_last_seen_at": 1746502701,
            "contact_last_seen_at": 1746501160,
            "last_activity_at": 1746502701,
            "timestamp": 1746502701,
            "created_at": 1746500873,
            "updated_at": 1746502717.520638,
            "event": "conversation_resolved"
          },
          "webhookUrl": "https://webhooks.flowai.app.br/webhook/lina",
          "executionMode": "production"
        }
      }
    ]
  },
  "versionId": "656d5f19-e43a-44a8-8c58-6917f033f0b1",
  "triggerCount": 0,
  "tags": [
    {
      "createdAt": "2025-05-19T18:41:32.426Z",
      "updatedAt": "2025-05-19T18:41:32.426Z",
      "id": "byJF50EssW8Z7Xdg",
      "name": "codai"
    }
  ]
}