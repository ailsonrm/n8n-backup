{
  "createdAt": "2025-04-20T13:20:32.990Z",
  "updatedAt": "2025-04-22T23:57:08.108Z",
  "id": "PeJfZp2koIll5H8n",
  "name": "Project | Sindney-AI | CXA",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "content": "## Pausa para Atendimento Humano",
        "height": 440,
        "width": 1240,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        280,
        740
      ],
      "typeVersion": 1,
      "id": "08c4ad7b-78b5-47df-9904-03d45f539fdf",
      "name": "Sticky Note29",
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sindney-ai-cxa",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        320,
        840
      ],
      "id": "04d93115-e18b-4d88-b6bd-1f4c12017518",
      "name": "Webhook",
      "webhookId": "153099f1-d1d2-4777-be6d-aeaa613f245f"
    },
    {
      "parameters": {
        "content": "## Registro de Cliente no Supabase",
        "height": 440,
        "width": 600,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1560,
        740
      ],
      "typeVersion": 1,
      "id": "ddfd8b5d-4c40-45fb-8192-306f7f70f902",
      "name": "Sticky Note22",
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Classifica Mensagens",
        "height": 440,
        "width": 700,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2200,
        740
      ],
      "typeVersion": 1,
      "id": "f496ceba-4f39-4170-be99-2d0bfbf110f0",
      "name": "Sticky Note28",
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('payload_handler').item.json.message.type }}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "5babf18b-3925-426c-b907-e8f3e7936ffc"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d8c1d47a-0014-4d4c-8c43-c68df3a99df2",
                    "leftValue": "={{ $('payload_handler').item.json.message.type }}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2260,
        800
      ],
      "id": "df0639ea-61ca-4d6b-b975-f6465758db16",
      "name": "message-type"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "=data",
        "options": {
          "language": "pt"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2720,
        1020
      ],
      "id": "64858768-3fc5-4269-a574-c8b6c2553800",
      "name": "openai-transcribe-audio",
      "credentials": {
        "openAiApi": {
          "id": "di9H6klhz4rejAkz",
          "name": "conn-open-ai-codai"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('payload_handler').item.json.contact.phone }}_{{ $('Get Organization SETUP').item.json.name }}_msg_buffer",
        "messageData": "={{ $('payload_handler').item.json.message.text.conversation }}",
        "tail": true
      },
      "id": "8feb1faf-0ce2-4a09-9b34-7560c0714ff1",
      "name": "Text Memory",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3000,
        820
      ],
      "credentials": {
        "redis": {
          "id": "Aqtr3gkXAZLLjpXT",
          "name": "conn-redis-codai"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('payload_handler').item.json.contact.phone }}_{{ $('Get Organization SETUP').item.json.name }}_msg_buffer",
        "messageData": "={{ $('openai-transcribe-audio').item.json.text }}",
        "tail": true
      },
      "id": "a50e747e-f2fe-4f45-b17e-7fa63520930e",
      "name": "Audio Memory",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3000,
        980
      ],
      "credentials": {
        "redis": {
          "id": "Aqtr3gkXAZLLjpXT",
          "name": "conn-redis-codai"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const data = $item(0).$node[\"Compara Get Memory\"].json[\"Redis2\"]; // Obtém o valor de Redis2 do nó \"If\"\n\n// Verifica se o dado é uma string que representa um array, e converte se necessário\nlet array = Array.isArray(data) ? data : JSON.parse(data);\n\n// Junta os elementos do array com um espaço entre eles\nconst mensagem_completa = array.join(\" \");\n\n// Retorna o resultado com o nome da variável \"mensagem_completa\"\nreturn [{ json: { mensagem_completa } }];\n"
      },
      "id": "1d4c7b32-960c-4787-bc86-df616400931e",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4220,
        800
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "key": "={{ $('payload_handler').item.json.contact.phone }}_{{ $('Get Organization SETUP').item.json.name }}_msg_buffer",
        "options": {}
      },
      "id": "fc154b0c-8794-442e-82eb-8ca509aeaa62",
      "name": "Get Memory 2",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3560,
        900
      ],
      "credentials": {
        "redis": {
          "id": "Aqtr3gkXAZLLjpXT",
          "name": "conn-redis-codai"
        }
      }
    },
    {
      "parameters": {
        "content": "## Mensagem Picotada",
        "height": 440,
        "width": 1180,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2940,
        740
      ],
      "typeVersion": 1,
      "id": "b0557e05-fd1b-4216-aa32-5f32f00d96b8",
      "name": "Sticky Note24",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "get",
        "key": "={{ $('payload_handler').item.json.contact.phone }}_{{ $('Get Organization SETUP').item.json.name }}_msg_buffer",
        "options": {}
      },
      "id": "ee6cdb0a-8d2e-406d-824d-80da9c1c7b9f",
      "name": "Get Memory 1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3220,
        900
      ],
      "credentials": {
        "redis": {
          "id": "Aqtr3gkXAZLLjpXT",
          "name": "conn-redis-codai"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d5a342e9-585b-42ea-be44-644adae10199",
              "leftValue": "={{ $('Edit Redis Memory').item.json.Redis2 }}",
              "rightValue": "={{ $('Edit Redis Memory').item.json.Redis1 }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "6c17df08-1208-4a5d-b488-d36c160aee1d",
      "name": "Compara Get Memory",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3900,
        900
      ]
    },
    {
      "parameters": {
        "content": "## Síndney.AI",
        "height": 440,
        "width": 560,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        5320,
        740
      ],
      "typeVersion": 1,
      "id": "824a417a-d81d-4d4e-84cf-e8fa3402bf94",
      "name": "Sticky Note4",
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        5400,
        1020
      ],
      "id": "593cdb3c-9486-44c3-932b-dfc59af390d0",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "di9H6klhz4rejAkz",
          "name": "conn-open-ai-codai"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('payload_handler').item.json.contact.phone }}_chat_memory_{{ $('Get Organization SETUP').item.json.name }}",
        "tableName": "={{ $('Get Organization SETUP').item.json.chat_table_name }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        5560,
        1040
      ],
      "id": "30d1f7b5-1f02-416e-aa46-82c613a4dff1",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "PpDZKoG3HZqhYPB9",
          "name": "conn-postgres-codai-2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "53a26bd3-29a1-4cc0-89a9-f41b28dfe47f",
      "name": "OpenAI3",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        6020,
        1000
      ],
      "credentials": {
        "openAiApi": {
          "id": "di9H6klhz4rejAkz",
          "name": "conn-open-ai-codai"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=message to be splitted: {{ $('sindnei-agent-ai').item.json.output }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Por favor, gere a saída exatamente no seguinte formato JSON:\n\n{\n  \"messages\": [\n    \"splittedMessage\",\n    \"splittedMessage\",\n    \"splittedMessage\",\n    \"splittedMessage\"\n  ]\n}\n\nAs mensagens devem ser divididas de forma natural e fluida, como se estivessem sendo lidas por uma pessoa. Evite cortes abruptos ou divisões artificiais de frases.\n\n📌 Regras de Formatação (compatíveis com WhatsApp):\n\nNegrito: utilize *palavra* (não **palavra**)\n\nTachado: utilize apenas quando necessário.\n\nItálico: evite, use só em casos muito específicos.\n\nLinks: insira a URL diretamente (ex: https://abcd.com) — evite [texto](link) no WhatsApp.\n\n\n✂️ Regras para separação das mensagens:\nMensagem de introdução: deve ser separada das demais.\n\nDetalhes de agendamento ou instruções contínuas: devem estar em uma única mensagem, usando \\n para quebras de linha internas.\n\nMensagem final ou de suporte: deve ser separada em outra mensagem.\n\nImportante:\nA estrutura JSON deve conter a chave \"messages\" com uma lista de uma ou mais mensagens, de acordo com a divisão feita. Mantenha a sintaxe JSON válida, com colchetes, aspas e vírgulas corretamente posicionadas."
            }
          ]
        }
      },
      "id": "bc395231-1ba2-49ea-8153-2c7dc4f7f7a1",
      "name": "Parser  Chain",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        6020,
        820
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('payload_handler').item.json.contact.phone }}_{{ $('Get Organization SETUP').item.json.name }}_msg_buffer"
      },
      "id": "2c933c93-1fcf-469f-b311-3aa856ce1065",
      "name": "Delete Memory",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        6880,
        780
      ],
      "credentials": {
        "redis": {
          "id": "Aqtr3gkXAZLLjpXT",
          "name": "conn-redis-codai"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a6d9aac-8565-4c58-abe3-8741393a5535",
              "leftValue": "={{ $('supabase-get-lead').item.json.id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1760,
        820
      ],
      "id": "9299c348-d7dd-4f8e-b0a0-de6a5b30ca06",
      "name": "if-existing-lead"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "={{ $('Get Organization SETUP').item.json.resident_table }}",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $('payload_handler').item.json.contact.phone.toNumber() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1600,
        820
      ],
      "id": "cec41e76-3602-4590-8885-f86e3646f989",
      "name": "supabase-get-lead",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "sWvNgamwZJ7hL1fO",
          "name": "conn-supabase-codai-2"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## R.A.G",
        "height": 380,
        "width": 560
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        5320,
        1240
      ],
      "typeVersion": 1,
      "id": "c6fa4b92-b755-4df8-9379-babb5b9ca82b",
      "name": "Sticky Note5",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1320,
        1040
      ],
      "id": "a688bccf-589a-4b2f-9e43-5037d9074315",
      "name": "Não faz nada - Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f336a1ff-e577-489d-a739-1eb8bd509245",
              "name": "Redis2",
              "value": "={{ $('Get Memory 2').item.json.propertyName }}",
              "type": "string"
            },
            {
              "id": "946d1420-e379-46e3-8fcd-3816340fbabb",
              "name": "Redis1",
              "value": "={{ $('Get Memory 1').item.json.propertyName }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "0a20a012-26b4-4997-b536-76fd38e004ea",
      "name": "Edit Redis Memory",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3720,
        900
      ]
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"messages\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"required\": [\"messages\"]\n}"
      },
      "id": "3036f6ff-dca5-4dfd-a5e3-ca5e429d7b95",
      "name": "OutputParser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        6180,
        1000
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.messages",
        "options": {
          "destinationFieldName": "output"
        }
      },
      "id": "995881b3-2f80-4b5e-94d8-693e6c800342",
      "name": "Segmento de Msgs",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        6340,
        820
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "4a2249a6-2e60-493e-833f-46340cf08f91",
      "name": "Loop Over Items1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        6540,
        820
      ]
    },
    {
      "parameters": {
        "name": "get_rag_vector_infos",
        "description": "Documentos internos, use para responder os moradores, com base nesses documentos, tire as dúvidas e questionamentos sobre o condomínio e tbm sobre serviços que estão implantados no condomínio.",
        "topK": 5
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        5600,
        1260
      ],
      "id": "7d0a45f3-a7fc-4200-869a-dfac2788499e",
      "name": "Answer questions with a vector store"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        5740,
        1480
      ],
      "id": "1452f262-fca7-4890-9417-3475f7c134d7",
      "name": "OpenAI Chat Model RAG",
      "credentials": {
        "openAiApi": {
          "id": "di9H6klhz4rejAkz",
          "name": "conn-open-ai-codai"
        }
      }
    },
    {
      "parameters": {
        "content": "## Resposta humanizada\n",
        "height": 440,
        "width": 1180,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        5940,
        740
      ],
      "typeVersion": 1,
      "id": "8354b53b-228c-45ab-898c-6de84b614035",
      "name": "Sticky Note2",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $now.setLocale('pt-BR').setZone(\"America/Sao_Paulo\") }}",
        "format": "custom",
        "customFormat": "EEEE, dd 'de' MMMM 'de' yyyy 'às' HH:mm",
        "outputFieldName": "=formattedDate",
        "options": {
          "includeInputFields": false,
          "timezone": true
        }
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        720,
        840
      ],
      "id": "204a7281-9f32-4b97-b6dc-db3bed9a701a",
      "name": "Date & Time",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('payload_handler').item.json.message.fromMe }}",
                    "rightValue": "fromClient",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    },
                    "id": "8d7d84f4-ab9f-4e1f-9b9a-e83cc4e9bc03"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "User"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4bee2c7b-e8fa-420c-9d5e-6140002eca91",
                    "leftValue": "={{ $('payload_handler').item.json.message.fromMe }}",
                    "rightValue": "eventN8n",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Me"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "40fbb4c3-f89c-4eab-8cbd-5ad683f756c6",
                    "leftValue": "={{ $('payload_handler').item.json.message.isGroup }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Group"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1120,
        840
      ],
      "id": "ddfd7ea2-ee9d-4e95-994d-3fb3a087b7f7",
      "name": "switch-msg-from"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0d409c70-6488-4f4f-8681-5bb552563957",
              "name": "evolution.serverUrl",
              "value": "={{ $('Webhook').item.json.body.body.server_url }}",
              "type": "string"
            },
            {
              "id": "4ae67c6f-3fba-45c0-ade2-1fa3731b93e8",
              "name": "evolution.phone",
              "value": "={{ $('Webhook').item.json.body.body.sender.split('@')[0] }}",
              "type": "string"
            },
            {
              "id": "6e253dad-0fbf-4a74-b6a4-618c79bb3460",
              "name": "evolution.apiKey",
              "value": "={{ $('Webhook').item.json.body.body.apikey }}",
              "type": "string"
            },
            {
              "id": "5e3e579f-f9dd-4fb0-9c4b-d2c56b151c55",
              "name": "contact.phone",
              "value": "={{ $('Webhook').item.json.body.body.data.key.remoteJid.split('@')[0] }}",
              "type": "string"
            },
            {
              "id": "877887ea-c7df-4c1e-b6a9-4ec573256127",
              "name": "contact.firstName",
              "value": "={{ $('Webhook').item.json.body.body.data.pushName.split(' ')[0] }}",
              "type": "string"
            },
            {
              "id": "ecc3073f-8c25-41bb-abfe-402c385c6031",
              "name": "contact.fullName",
              "value": "={{ $('Webhook').item.json.body.body.data.pushName }}",
              "type": "string"
            },
            {
              "id": "d4768288-0024-47c6-b9c6-3dcc9e18c2e0",
              "name": "message.type",
              "value": "={{ !!$('Webhook').item.json.body.body.data.message.conversation && 'text' || \n   !!$('Webhook').item.json.body.body.data.message.audioMessage && 'audio'\n}}",
              "type": "string"
            },
            {
              "id": "20a86b71-c77f-4b4e-9db9-b9964276e67f",
              "name": "message.text.conversation",
              "value": "={{ $('Webhook').item.json.body.body.data.message.conversation }}",
              "type": "string"
            },
            {
              "id": "64a79a38-696d-4383-a1a7-527a3ef3a4d4",
              "name": "message.audio.base64",
              "value": "={{ $('Webhook').item.json.body.body.data.message.base64 }}",
              "type": "string"
            },
            {
              "id": "3c159587-cd22-45df-aac7-82add1c9992e",
              "name": "message.status",
              "value": "={{ $('Webhook').item.json.body.body.data.status }}",
              "type": "string"
            },
            {
              "id": "cc95a725-d953-433d-a8ee-aa903f515ca5",
              "name": "message.timestamp",
              "value": "={{ DateTime.fromMillis($('Webhook').item.json.body.body.data.messageTimestamp) }}",
              "type": "string"
            },
            {
              "id": "d65f9d80-5f16-4c29-965b-fc8832fe13eb",
              "name": "message.fromMe",
              "value": "={{ $('Webhook').item.json.body.body.data.key.fromMe }}",
              "type": "boolean"
            },
            {
              "id": "44cce600-ebb8-4242-8008-5da0951d16c5",
              "name": "message.isGroup",
              "value": "={{ $('Webhook').item.json.body.body.event != 'messages.upsert' }}",
              "type": "boolean"
            },
            {
              "id": "c3d798ea-378e-4f39-a764-82ff9733e36a",
              "name": "message.id",
              "value": "={{ $('Webhook').item.json.body.body.data.key.id }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": "=",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        920,
        840
      ],
      "id": "9a8e68a5-ee77-4c0f-b868-2425780e97f9",
      "name": "payload_handler"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "fileName": "=file_{{ $now.format('yyyyMMdd_HHmmss') }}.ogg"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2520,
        1020
      ],
      "id": "28fe1c2f-71b8-4fa4-a771-85dd23436cd5",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "64a79a38-696d-4383-a1a7-527a3ef3a4d4",
              "name": "base64",
              "value": "={{ $('payload_handler').item.json.message.audio.base64 }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": "=",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2300,
        1020
      ],
      "id": "f36f52dd-c6ae-41e9-a9a2-3c7e092417ac",
      "name": "Adapter"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Code').item.json.mensagem_completa}}",
        "options": {
          "systemMessage": "={{ $('Define Instruction').item.json.instruction }} }}"
        }
      },
      "id": "bdc517d4-e03f-45f1-814c-2763b2a62a36",
      "name": "sindnei-agent-ai",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        5400,
        820
      ]
    },
    {
      "parameters": {
        "tableName": {
          "__rl": true,
          "value": "={{ $('Get Organization SETUP').item.json.vector_rag_table }}",
          "mode": "id"
        },
        "options": {
          "queryName": "={{ $('Get Organization SETUP').item.json.match_function }}",
          "metadata": {
            "metadataValues": [
              {
                "name": "organization",
                "value": "={{ $('Get Organization SETUP').item.json.name }}"
              },
              {
                "name": "bucket",
                "value": "={{ $('Get Organization SETUP').item.json.bucket }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        5340,
        1360
      ],
      "id": "a429416b-499d-4ae0-b868-0bdb5c408c35",
      "name": "Supabase Vector Store1",
      "credentials": {
        "supabaseApi": {
          "id": "sWvNgamwZJ7hL1fO",
          "name": "conn-supabase-codai-2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        5560,
        1480
      ],
      "id": "387912b7-8f76-403c-b08a-7b902fb620f9",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "di9H6klhz4rejAkz",
          "name": "conn-open-ai-codai"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "organizations",
        "filters": {
          "conditions": [
            {
              "keyName": "evolution_instance",
              "keyValue": "={{ $json.body.body.instance }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        520,
        840
      ],
      "id": "d39f6c9e-190d-4c12-ab3d-34d6abc49851",
      "name": "Get Organization SETUP",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "sWvNgamwZJ7hL1fO",
          "name": "conn-supabase-codai-2"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "tableId": "={{ $('Get Organization SETUP').item.json.resident_table }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "id",
              "fieldValue": "={{ $('payload_handler').item.json.contact.phone.toNumber() }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $('payload_handler').item.json.contact.fullName }}"
            },
            {
              "fieldId": "organization",
              "fieldValue": "={{ $('Get Organization SETUP').item.json.name }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1940,
        980
      ],
      "id": "6bac1bba-7a1a-4c7a-b631-7634f07f1f49",
      "name": "supabase-create-resident",
      "credentials": {
        "supabaseApi": {
          "id": "sWvNgamwZJ7hL1fO",
          "name": "conn-supabase-codai-2"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "id": "8cce77e1-cb28-409a-b522-3b6d8450f4c7",
      "name": "Wait 2 seg",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3400,
        900
      ],
      "webhookId": "52441967-5a76-464a-98fd-c5f7e5d90e8a"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "garage_sindney",
        "filters": {
          "conditions": [
            {
              "keyName": "garage_number",
              "keyValue": "={{ $fromAI('garage_number', `parking space number`, 'string') }}"
            },
            {
              "keyName": "organization",
              "keyValue": "={{ $('Get Organization SETUP').item.json.name }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        6060,
        1360
      ],
      "id": "c1da51a9-5509-4239-8f74-70fd2367ff92",
      "name": "get_apto_by_garage_number",
      "credentials": {
        "supabaseApi": {
          "id": "sWvNgamwZJ7hL1fO",
          "name": "conn-supabase-codai-2"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "garage_sindney",
        "filters": {
          "conditions": [
            {
              "keyName": "apto",
              "keyValue": "={{ $fromAI('apto_number', `apartment number`, 'string') }}"
            },
            {
              "keyName": "organization",
              "keyValue": "={{ $('Get Organization SETUP').item.json.name }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        6280,
        1360
      ],
      "id": "390080bf-9cc0-46cc-8c55-b8e82d85839d",
      "name": "get_garage_by_apto_number",
      "credentials": {
        "supabaseApi": {
          "id": "sWvNgamwZJ7hL1fO",
          "name": "conn-supabase-codai-2"
        }
      }
    },
    {
      "parameters": {
        "inputText": "={{ $('Code').item.json.mensagem_completa }}",
        "categories": {
          "categories": [
            {
              "category": "SINDICANCIA",
              "description": "Detecta textos com dúvidas, informações ou reclamações sobre a rotina do condomínio. Palavras-chave: portaria, síndico, regras, barulho, encomenda, área comum, visitante, garagem, assembleia, vizinho, taxa condominial, manutenção, pets, regras do prédio, horários, reserva de espaço."
            },
            {
              "category": "MODULOCKER",
              "description": "Detecta textos relacionados à solução de armários inteligentes da Easytech, como lockers para condomínios, hotéis, lojas e eventos. Palavras-chave: modulocker, smart locker, guarda-volumes, QR Code, box térmico, armário modular, retirada de encomendas, locker autônomo, integração via app ou WhatsApp."
            }
          ]
        },
        "options": {
          "fallback": "other"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        4380,
        800
      ],
      "id": "0f86db3e-6a82-4ad8-83b3-1989cea57533",
      "name": "Text Classifier"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        4320,
        1000
      ],
      "id": "fdb7e450-a2cf-435f-8361-f957e85ce784",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "di9H6klhz4rejAkz",
          "name": "conn-open-ai-codai"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Get Organization SETUP').item.json.evolution_instance }}",
        "remoteJid": "={{ $('payload_handler').item.json.contact.phone }}",
        "messageText": "={{ $json.output }}",
        "options_message": {
          "delay": 2000
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        6880,
        960
      ],
      "id": "14d72b8f-d964-4e6d-a5a8-a3f5ff3d65c2",
      "name": "Evolution API",
      "credentials": {
        "evolutionApi": {
          "id": "g7dMaKxLCwuLESJx",
          "name": "conn-evolution-codai"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        320,
        560
      ],
      "id": "cd6352f9-c8ed-49ad-877c-4fa30c237c9e",
      "name": "When chat message received",
      "webhookId": "99d55b2c-b4f5-489d-a63f-be6150b0706e",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "06bad7d3-190c-4501-97b9-206621389438",
              "name": "instruction",
              "value": "=<instruction>\nSEMPRE busque informações na tool[get_rag_vector_infos] e responda dúvidas sobre o condomínio que estão na base de dados RAG use a tool [get_rag_vector_infos].</instruction>\n\n<setup>\nNome do morador: Ailson\nHoje é dia {{ $now.setLocale('pt-BR').format(\"EEEE, dd 'de' MMMM 'de' yyyy - HH:mm:ss\") }}.\n</setup>\n\n<prompt>\n{{ $('Get Organization SETUP').item.json.prompt }}\n</prompt>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4820,
        760
      ],
      "id": "fa7c30bf-fe8e-4c17-831d-7b320812bf2c",
      "name": "Instruções para Sindicância"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "06bad7d3-190c-4501-97b9-206621389438",
              "name": "instruction",
              "value": "=<instruction>\nSeu nome é Sindney, o síndico assistente virtual 24h do condomínio Residencial Sindney, no seu condomínio está implantado o Modulocker, caso o morador questione, tenha dúvidas, SEMPRE busque informações na tool [get_rag_vector_infos] que é uma base de dados RAG, para que você responda dúvidas sobre a solução Modulocker\n</instruction>\n\n<setup>\nNome do morador: Ailson\nHoje é dia {{ $now.setLocale('pt-BR').format(\"EEEE, dd 'de' MMMM 'de' yyyy - HH:mm:ss\") }}.\n</setup>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4820,
        920
      ],
      "id": "2e75711e-aab6-40d2-9878-fa884aba1474",
      "name": "Instruções para Modulocker"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "06bad7d3-190c-4501-97b9-206621389438",
              "name": "instruction",
              "value": "=<instruction>\nSiga a conversa normalmente\n</instruction>\n\n<prompt>\n{{ $('Get Organization SETUP').item.json.prompt }}\n</prompt>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4540,
        1020
      ],
      "id": "82e44370-136f-42d5-9b8b-bcfae8fa62e8",
      "name": "Sem Instruções"
    },
    {
      "parameters": {
        "content": "## R.A.G",
        "height": 440,
        "width": 1080
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4180,
        740
      ],
      "typeVersion": 1,
      "id": "b6c314ba-a778-4337-aac5-f69dc2f1ebad",
      "name": "Sticky Note",
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Tools\n",
        "height": 380,
        "width": 1180,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        5940,
        1240
      ],
      "typeVersion": 1,
      "id": "b4f241e5-99da-49ae-8518-c2fc5fbe9bc4",
      "name": "Sticky Note3",
      "disabled": true
    },
    {
      "parameters": {
        "method": "=POST",
        "url": "={{ $('payload_handler').item.json.evolution.serverUrl }}/chat/sendPresence/{{ $('Get Organization SETUP').item.json.evolution_instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('payload_handler').item.json.evolution.apiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('payload_handler').item.json.contact.phone }}\",\n  \"delay\": 5000,\n  \"presence\": \"composing\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        7940,
        740
      ],
      "id": "c102b9ad-2b92-4533-9322-77fcfbbcd9ac",
      "name": "HTTP Request",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('payload_handler').item.json.evolution.serverUrl }}/message/sendLocation/{{ $('Get Organization SETUP').item.json.evolution_instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('payload_handler').item.json.evolution.apiKey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('payload_handler').item.json.contact.phone }}\",\n  \"latitude\": {{ $json.lat }},\n  \"longitude\": {{ $json.lon }},\n  \"name\": \"{{ $('Information Extractor').item.json.output.name }}\",\n  \"address\": \"{{ $('Information Extractor').item.json.output.endereco }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        8320,
        480
      ],
      "id": "361af4c9-a694-435f-9252-c54cd94ba5fe",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a5e0a8b6-cffe-4f8a-9df9-a315951e390c",
              "name": "instruction",
              "value": "={{ $json.instruction }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5040,
        1020
      ],
      "id": "3b13d0a5-9ab1-4a52-a8e8-1b3ccb2fb8a1",
      "name": "Define Instruction"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        7260,
        500
      ],
      "id": "ea16eebc-1887-4bd1-be8a-ff920c5fd8d5",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "di9H6klhz4rejAkz",
          "name": "conn-open-ai-codai"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ $json.output }}",
        "attributes": {
          "attributes": [
            {
              "name": "name",
              "description": "Nome da empresa",
              "required": true
            },
            {
              "name": "logradouro",
              "description": "nome da av, rua, alameda do endereço",
              "required": true
            },
            {
              "name": "cidade",
              "description": "nome da cidade do endereço"
            },
            {
              "name": "endereco",
              "description": "endereço completo",
              "required": true
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1,
      "position": [
        7640,
        220
      ],
      "id": "b91689f4-283c-40db-99fb-2b93caa20c09",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        7700,
        200
      ],
      "id": "2fc0326a-1de5-49a8-b70c-d0b29ea1d603",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "di9H6klhz4rejAkz",
          "name": "conn-open-ai-codai"
        }
      }
    },
    {
      "parameters": {
        "inputText": "={{ $json.output }}",
        "categories": {
          "categories": [
            {
              "category": "ENDERECO",
              "description": "=Avenida Brasil, 1000 - Rio de Janeiro, RJ\n\nRua das Flores, 45 - Centro, Porto Alegre\n\n📍 Condomínio X: Av. Paulista, 456 - SP"
            },
            {
              "category": "NAO_ENDERECO",
              "description": "Claro! O endereço do nosso condomínio é:\n\nSe precisar de algo, me avisa!\n\nEstamos à disposição!"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        7180,
        340
      ],
      "id": "677c479e-03e7-4c7a-aa88-4c8120f1dd92",
      "name": "Text Classifier2"
    },
    {
      "parameters": {
        "url": "=https://nominatim.openstreetmap.org/search?q={{ $json.output.logradouro }}/{{ $json.output.cidade }}&format=json&limit=1",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        8060,
        320
      ],
      "id": "e039df66-e727-465b-9c60-11fb2d09c1f1",
      "name": "HTTP Request2"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Get Organization SETUP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "message-type": {
      "main": [
        [
          {
            "node": "Text Memory",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Adapter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "openai-transcribe-audio": {
      "main": [
        [
          {
            "node": "Audio Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Memory": {
      "main": [
        [
          {
            "node": "Get Memory 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Audio Memory": {
      "main": [
        [
          {
            "node": "Get Memory 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Text Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Memory 2": {
      "main": [
        [
          {
            "node": "Edit Redis Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Memory 1": {
      "main": [
        [
          {
            "node": "Wait 2 seg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compara Get Memory": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "sindnei-agent-ai",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "sindnei-agent-ai",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI3": {
      "ai_languageModel": [
        [
          {
            "node": "Parser  Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parser  Chain": {
      "main": [
        [
          {
            "node": "Segmento de Msgs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if-existing-lead": {
      "main": [
        [
          {
            "node": "message-type",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "supabase-create-resident",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "supabase-get-lead": {
      "main": [
        [
          {
            "node": "if-existing-lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Redis Memory": {
      "main": [
        [
          {
            "node": "Compara Get Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OutputParser": {
      "ai_outputParser": [
        [
          {
            "node": "Parser  Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Segmento de Msgs": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Delete Memory",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Evolution API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Answer questions with a vector store": {
      "ai_tool": [
        [
          {
            "node": "sindnei-agent-ai",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model RAG": {
      "ai_languageModel": [
        [
          {
            "node": "Answer questions with a vector store",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time": {
      "main": [
        [
          {
            "node": "payload_handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "switch-msg-from": {
      "main": [
        [
          {
            "node": "supabase-get-lead",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Não faz nada - Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Não faz nada - Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "payload_handler": {
      "main": [
        [
          {
            "node": "switch-msg-from",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Adapter": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "openai-transcribe-audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sindnei-agent-ai": {
      "main": [
        [
          {
            "node": "Parser  Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_vectorStore": [
        [
          {
            "node": "Answer questions with a vector store",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Get Organization SETUP": {
      "main": [
        [
          {
            "node": "Date & Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "supabase-create-resident": {
      "main": [
        [
          {
            "node": "message-type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 2 seg": {
      "main": [
        [
          {
            "node": "Get Memory 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_apto_by_garage_number": {
      "ai_tool": [
        [
          {
            "node": "sindnei-agent-ai",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get_garage_by_apto_number": {
      "ai_tool": [
        [
          {
            "node": "sindnei-agent-ai",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Text Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Text Classifier": {
      "main": [
        [
          {
            "node": "Instruções para Sindicância",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Instruções para Modulocker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sem Instruções",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evolution API": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        []
      ]
    },
    "Instruções para Sindicância": {
      "main": [
        [
          {
            "node": "Define Instruction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instruções para Modulocker": {
      "main": [
        [
          {
            "node": "Define Instruction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sem Instruções": {
      "main": [
        [
          {
            "node": "Define Instruction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Define Instruction": {
      "main": [
        [
          {
            "node": "sindnei-agent-ai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        []
      ]
    },
    "HTTP Request": {
      "main": [
        []
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Text Classifier2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Text Classifier2": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "6d1475e4-56d1-4023-a666-8557fad43f25",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-04-20T13:18:50.314Z",
      "updatedAt": "2025-04-20T13:18:50.314Z",
      "id": "6KEPqx90w7A0maJs",
      "name": "sindney-ai"
    }
  ]
}